var SEARCHDIV = "searchTarget"; //the searchbox is appended to this
var VISDISPLAY = 0;
var foodsrchdisplay = 0;
var exsrchdisplay = 0;

var sfdiv;
//var section="";
//var currentpid=0;
//var currentwiz=0;
//var sectionID=0;
var imgDescLength = 62;
var filterPage=0;
var searchstack=[];

function stackClear()
{
    searchstack = [];
}
function stackAdd(url, classname)
{
    var searchstackobj = new Object();
    searchstackobj.url = url;
    searchstackobj.classname=classname;
    searchstack.push(searchstackobj);
}
function bc_go_back()
{
    if(searchstack.length<=1)
        closeSearch();
    else
    {
        var obj = searchstack.pop();
        if(searchstack.length>0)
        {
             obj = searchstack.pop();
            SearchUpdate(obj.url,false);
        }
    }

}
function ebc_go_back(){
   ebc_go_back2();
}

function getSearchBox(help){
    return getSearchBoxJQ();
}

function getSearchBoxJQ(){
    hideDiary();

    if(jQuery("#search_energy_out_pane").length>0){
        ajax_remove(SEARCHDIV,'search_energy_out_pane');
    }
    
    searchbox = jQuery("#pane_search_extend");
    diaryDiv = jQuery("#dContent");
    mastercontainervar = jQuery("#"+SEARCHDIV);

    if(searchbox.length==0){
        var searchbox=jQuery('<div id="pane_search_extend"></div>');

        if(mastercontainervar.length==0){
            jQuery("body").append(searchbox);
        }
        else{
            jQuery(mastercontainervar).prepend(searchbox);
        }
    }

    if(diaryDiv.length>0){
        diaryDiv.css("display", "none");
    }
   
    searchbox.attr("class","");
    return searchbox;
}

function SearchServings(productid,wizardid) {

    searchbox = getSearchBoxJQ();
    if(wizardid==undefined) wizardid=0;

    currentpid = productid;
    currentwiz = wizardid;

    var url;
    if(wizardid>0)
    {
        searchbox.attr("class","extendFullWiz");
        url = "/Ajax/Wizards/"+  wizardid + "/" + productid;
    }
    else
    {
        if(jQuery('#searchKey').length>0){
            url = "/Ajax/ProductItem?productID="+productid + "&searchKey=" + jQuery('#searchKey').val();
        } else {
            url = "/Ajax/ProductItem?productID="+productid;
        }    
    }

    stackAdd(url);
    ajax_UpdaterURL(url,searchbox.attr("id"));
}
// For a category Search
function SearchCategoryBL(parentid, bc) {
    SearchCategoryBL2(parentid, bc);
}

function SearchCategory(parentid, bc) {
    SearchCategory2(parentid, bc);
}

function SearchCategoryMain(parentid, bc){
    SearchCategoryMain2(parentid, bc);
}
function closeSearch(energy){
    sb_closeSearch();
}

function SearchUpdate(url,clearstack)
{
    if(clearstack)
        stackClear();
   // jQuery("#txt_productsearch").blur(); 
   // url = itemsPerPage(url,VISDISPLAY); 
   
    if(url.indexOf("?") !==-1){
        url=url+"&isWebp="+isWebp;
    } else{
        url=url+"?isWebp="+isWebp;
    }   
   
    stackAdd(url);
    searchbox = getSearchBoxJQ();
    
    if(url.indexOf("/api/") !== -1){
        api_SearchUpdate(history.state.api,history.state.template);
    } else {
        ajax_UpdaterURL(url,searchbox.attr("id"),displaySearch);
    }
    
}

function itemsPerPage(url,VISDISPLAY){
    
    nut_winheight=jQuery(window).height();
    nut_winwidth=jQuery(window).width();
    nut_navarea = 106;
    titlearea = 80;
    if(url.indexOf("filter=1")>0) titlearea = 140;
    paddingoffset = 72;

    resultheight = 28;
    
    if(url.indexOf("vis=")>0){
        vischar =  url.indexOf("vis=");
        VISDISPLAY = url.charAt(vischar+4);
    }   
    
    
    if(VISDISPLAY==1) resultheight =58;
    if(VISDISPLAY==3)resultheight =145;

    resultsarea = nut_winheight-nut_navarea-titlearea-paddingoffset;
    ipp = Math.floor(resultsarea / resultheight);

    if(VISDISPLAY==3){
        if(nut_winwidth<1200){
            ipp = (ipp * 4) - 2;
        }else{
            ipp = (ipp * 5) - 2;
        }
    }
    
    if(url.indexOf("?")> 0){
        url = url + "&ipp="+ipp;
    } else{
        url = url + "?ipp="+ipp;
    }
    
    return url;
}

function SearchExerciseMain(parentid, bc) {

    // Perform Search
    SearchExercise(parentid, bc);
}

function SearchExercise(parentid, bc) {

    url = "/Ajax/ExerciseCategorySearch?key=" + parentid;
    SearchExerciseUpdate(url,false);

}

function SearchExerciseUpdate(url,clearstack){
    SearchExerciseUpdate2(url,clearstack);
}

function exerciseBL(key,desc){

    var url = "/Ajax/ExerciseSearch?key="+key+"&desc="+desc;
    SearchExerciseUpdate(url,false);
}
function exerciseActivity(key,desc,kph){

    var url = "/Ajax/ExerciseActivity?key="+key+"&desc="+desc+"&kph="+kph;
    //SearchExerciseUpdate(url,false);
	SearchExerciseUpdate(encodeURI(url),false);
}

function searchExerciseAutoSearch(p){
    searchExerciseAutoSearch2(p);
}

function SearchExerciseText(f){
    SearchExerciseText2(f);
}

function SearchText(f,srch) {
    SearchText2(f,srch);
}

function productAutoSearch(p, srch){
    return productAutoSearch2(p, srch);
}

function ED_create(arg0,pid)
{
    SearchUpdate("/Ajax/UserProduct/Edit?productid=" + pid);
}
function ED_validate(id,saveonly){

	var retval = true;
	var f = jQuery('#ma_');

	if(f.length<1){
		alert('Unsupported');
		return;
	}
	//f.saveonly.value=saveonly;
        jQuery("input[name='saveonly']").val(saveonly);
	if(retval){
            if(jQuery('input[name="txtkcal"]').val()==''){
                basicAlert('Please enter a kcal value.');
                retval= false;
            }
	}
	if(retval){
            if(jQuery('input[name="txtfat"]').val()==''){
                basicAlert('Please enter a fat value.');
                retval= false;
            }
	}
	if(retval){
            kcalval = jQuery('input[name="txtkcal"]').val();
            fatval = jQuery('input[name="txtfat"]').val();

            if(kcalval<(fatval*9)){
                    basicAlert("Every gram of Fat must contain at least 9 Kcal. Based on your fatg figure the energy should be at least " + Math.round((fatval*9)) + "kcal.");
                    retval = false;
            }
	}
	if(!retval)
	{
		return;
	}

	var url = "/Ajax/Diary/ChangeProduct?id=" + id;

	var opt = jQuery('[name="srvsize"]').val();


	var s = "&txtkcal=" + jQuery('input[name="txtkcal"]').val() + "&txtfat="+ jQuery('input[name="txtfat"]').val() + "&srvsize=" + opt + "&txtprotein=" + jQuery('input[name="txtprotein"]').val() + "&txtsatfat=" + jQuery('input[name="txtsatfat"]').val() + "&txtcarbs=" + jQuery('input[name="txtcarbs"]').val() + "&txtfibre=" + jQuery('input[name="txtfibre"]').val() + "&txtsugars=" + jQuery('input[name="txtsugars"]').val() + "&txtsalt=" + jQuery('input[name="txtsalt"]').val()  + "&saveonly=" + saveonly;

        if(jQuery('input[name="fiveaday"]').length>0){
			s = s + "&fiveaday=" + jQuery('input[name="fiveaday"]').val();
	}
        if(jQuery('input[name="txtalcohol"]').length>0){
		s = s+"&txtalcohol=" + jQuery('input[name="txtalcohol"]').val();
	}
	//currentpid = productid;
	ajax_Get(url + s, js3 );

}

function ED_changeServing(obj){
	var pp;var psf;var pc;var pf;var ps;var psa;var pfive;
	var found = false;

        var f = document.getElementById('ma_');

        if(f)
        {
            if(obj.value==100)
            {

            }
            else
            {
                f.txtkcal.value=fixNum(f.k.value * obj.value,0);
                f.txtfat.value=fixNum(f.f.value * obj.value,1);
                f.txtprotein.value = fixNum(f.p.value * obj.value,1);
                f.txtcarbs.value = fixNum(f.c.value * obj.value,1);
                f.txtsugars.value = fixNum(f.su.value * obj.value,1);
                f.txtsatfat.value = fixNum(f.sf.value * obj.value,1);
                f.txtsodium.value = fixNum(f.na.value * obj.value,1);
                f.txtfibre.value = fixNum(f.fi.value * obj.value,1);
                f.txtsalt.value = fixNum(f.sa.value * obj.value,2);
            }
        }
        if(1==1) return ;

	for(x=0; x<arraylist.length; x++)
	{
		if(obj.value==arraylist[x].factor)
		{
			found = true;
                        if(obj.value==100)
			{
				pkcal = Math.round(arraylist[x].kcal/100 * arraylist[x].factor_100);
				pfatg = MA_fix(arraylist[x].fatg/100 * arraylist[x].factor_100);
				pp = MA_fix(arraylist[x].p/100 * arraylist[x].factor_100);
				psf = MA_fix(arraylist[x].sf/100 * arraylist[x].factor_100);
				pc = MA_fix(arraylist[x].c/100 * arraylist[x].factor_100);
				pf = MA_fix(arraylist[x].f/100 * arraylist[x].factor_100);
				ps = MA_fix(arraylist[x].s/100 * arraylist[x].factor_100);
				psa = MA_fix(arraylist[x].sa/100 * arraylist[x].factor_100);
				pfive = MA_fix(arraylist[x].five/100 * arraylist[x].factor_100);
				pal = MA_fix(arraylist[x].alcohol/100 * arraylist[x].factor_100);
			}
			else
			{
				pkcal = Math.round(arraylist[x].kcal);
				pfatg = MA_fix(arraylist[x].fatg);
				pp = MA_fix(arraylist[x].p);
				psf = MA_fix(arraylist[x].sf);
				pc = MA_fix(arraylist[x].c);
				pf = MA_fix(arraylist[x].f);
				ps = MA_fix(arraylist[x].s);
				psa = MA_fix(arraylist[x].sa);
				pfive = MA_fix(arraylist[x].five);
				pal = MA_fix(arraylist[x].alcohol);
			}
			x = arraylist.length;
		}
	}
        if(!found & obj.value==1000)
	{
                pkcal = 0;
                pfatg = 0;
                pp = 0;
                psf = 0;
                pc = 0;
                pf = 0;
                ps = 0;
                psa = 0;
                pfive = 0;
                pal = 0;

        }



	var f = MA_getForm('ma');
	if(f)
	{
		f.txtkcal.value=pkcal;
		f.txtfat.value=pfatg;
		f.txtprotein.value=pp;
		f.txtsatfat.value=psf;
		f.txtcarbs.value=pc;
		f.txtfibre.value=pf;
		f.txtsugars.value=ps;
		f.txtsodium.value=psa;
		f.txtsalt.value=psa;
		if(f.fiveaday)
			f.fiveaday.selectedIndex=-1;
		MA_fiveshow(0);
		var fi = document.getElementById('fiveaday_data');
		if(fi)
		{
			fi.innerHTML =pfive;
		}
		if(f.txtalcohol)
			f.txtalcohol.value=pal;
	}
	else
	{
		alert('Unsupported');
	}
}


function MA_fiveshow(vis){
    if(vis==1){
        var obj = document.getElementById("fiveaday_row2");
        if(obj) obj.style.display='block';

        obj = document.getElementById("fiveaday_row1");
        if(obj)obj.style.display='none';
    }
    else{
        obj = document.getElementById("fiveaday_row1");
        if(obj)
        obj.style.display='block';
        obj = document.getElementById("fiveaday_row2");
        if(obj)
        obj.style.display='none';
    }
    return false;
}

function filterScroll(x,y){
   sfdiv = jQuery('#sfWindow'); 
   sfdiv.animate({
      left:x
   },2000);

   return false;
}

js1 = function(mode,saveonly)
{

	if(mode==1) //ma
	{
		MA_validate(mode,'ma',saveonly);
	}
	else if(mode==2)
	{
		MA_validate(mode,'ma',saveonly);
	}

}
js3 = function()
{
    closeSearch();
}
js2 = function(obj)
{
	var pp;var psf;var pc;var pf;var ps;var psa;var pfive;
	var found = false;
         arraylist = jsonObj.ajaxJSON;


	for(x=0; x<arraylist.length; x++)
	{
		if(obj.value==arraylist[x].factor)
		{
			found = true;
                        if(obj.value==100)
			{
				pkcal = Math.round(arraylist[x].kcal/100 * arraylist[x].factor_100);
				pfatg = MA_fix(arraylist[x].fatg/100 * arraylist[x].factor_100);
				pp = MA_fix(arraylist[x].p/100 * arraylist[x].factor_100);
				psf = MA_fix(arraylist[x].sf/100 * arraylist[x].factor_100);
				pc = MA_fix(arraylist[x].c/100 * arraylist[x].factor_100);
				pf = MA_fix(arraylist[x].f/100 * arraylist[x].factor_100);
				ps = MA_fix(arraylist[x].s/100 * arraylist[x].factor_100);
				psa = MA_fix(arraylist[x].sa/100 * arraylist[x].factor_100);
				pfive = MA_fix(arraylist[x].five/100 * arraylist[x].factor_100);
				pal = MA_fix(arraylist[x].alcohol/100 * arraylist[x].factor_100);
			}
			else
			{
				pkcal = Math.round(arraylist[x].kcal);
				pfatg = MA_fix(arraylist[x].fatg);
				pp = MA_fix(arraylist[x].p);
				psf = MA_fix(arraylist[x].sf);
				pc = MA_fix(arraylist[x].c);
				pf = MA_fix(arraylist[x].f);
				ps = MA_fix(arraylist[x].s);
				psa = MA_fix(arraylist[x].sa);
				pfive = MA_fix(arraylist[x].five);
				pal = MA_fix(arraylist[x].alcohol);
			}
			x = arraylist.length;
		}
	}
        if(!found & obj.value==1000)
	{
                pkcal = 0;
                pfatg = 0;
                pp = 0;
                psf = 0;
                pc = 0;
                pf = 0;
                ps = 0;
                psa = 0;
                pfive = 0;
                pal = 0;

        }



	var f = MA_getForm('ma');
	if(f)
	{
		f.txtkcal.value=pkcal;
		f.txtfat.value=pfatg;
		f.txtprotein.value=pp;
		f.txtsatfat.value=psf;
		f.txtcarbs.value=pc;
		f.txtfibre.value=pf;
		f.txtsugars.value=ps;
		f.txtsodium.value=psa;
		if(f.fiveaday)
			f.fiveaday.selectedIndex=-1;
		MA_fiveshow(0);
		var fi = document.getElementById('fiveaday_data');
		if(fi)
		{
			fi.innerHTML =pfive;
		}
		if(f.txtalcohol)
			f.txtalcohol.value=pal;
	}
	else
	{
		alert('Unsupported');
	}
}
MA_getForm = function(formname)
{
	var f = document.forms[formname];
	if(!f)
		var f = $(formname + '_');
	return f;
}
MA_validateKeyPress = function(e, validSet)
{
    var key;
    var keychar;

    if(window.event || !e.which) // IE
        key = e.keyCode; // IE
    else if(e)
        key = e.which;   // Netscape
    else
        return true;     // no validation
	if(key<32) return true;
    keychar = String.fromCharCode(key);
    validSet += String.fromCharCode(8);


    if (validSet.indexOf(keychar) < 0)
      return false;

    return true;
}

MA_fix = function(f)
{
 if(f<0)
 	return "";
 return (1 * f).toFixed(1);
}


MA_change = function(con)
{
	var str=con.value;
	var pos=str.indexOf("e.g");
        var pos1=str.indexOf("<brand>");
        var pos2=str.indexOf("<description>");
        var pos3=str.indexOf("<e.g. per 1/2 pizza>");
	if(pos=='0' ||pos1=='0' || pos2=='0' || pos3=='0')
            con.value='';
	else
        {
            pos=str.indexOf("full barcode");
            if(pos=='0')
                    con.value='';
        }

        con.style.color="#000000";
}

MA_validate = function(mode,formname,saveonly){

	var retval = true;
	var f = MA_getForm(formname);

	if(!f)
	{
		alert('Unsupported');
		return;
	}
	//f.saveonly.value=saveonly;
        jQuery("input[name='saveonly']").val(saveonly);
	if(mode==1)
	{
            if(f.txttitle){
		if (f.txttitle.value=='' || f.txttitle.value=='<brand>'){
			f.txttitle.value = '';
		}
            }
	}
	if(mode==1)
	{
		if(retval)
		{
                    if(f.txtdescription){
			if (f.txtdescription.value=='' || f.txtdescription.value=='<description>'){
				alert('Please enter a product description.');
				retval= false;
			}
                    }
		}
	}
	if(mode==1)
	{
            if(f.txtbarcode){
		if (f.txtbarcode.value=='<full barcode>'){
			f.txtbarcode.value = '';
			if(retval){
			if (f.txtdescription.value=='' || f.txtdescription.value=='<description>'){
				alert('Please enter a product description.');
				retval= false;
			}
			}
		}
		}
	}
/*
	if(mode==1)
	{
		if(retval){
			var barcode= f.txtbarcode.value;
			if (barcode.length > 0)
			{
				if(!(barcode.length==8 || barcode.length==11 || barcode.length==12 || barcode.length==13))
				{
					alert("Please enter a valid barcode");
					retval= false;
				}
			}
		}
	}
*/
	if(mode==1)
	{
		if(retval)
		{
                    if(f.txtsrvsize){
			if (f.txtsrvsize.value=='' || f.txtsrvsize.value=='<e.g. per 1/2 pizza>'){
				alert('Please enter a serving size.');
				retval= false;
			}
                    }
		}
	}
	if(retval)
	{
            if(f.txtkcal){
		if (f.txtkcal.value==''){
			alert('Please enter a kcal value.');
			retval= false;
		}
            }
	}
	if(retval)
	{
            if(f.txtfat){
		if (f.txtfat.value==''){
			alert('Please enter a fat value.');
			retval= false;
		}
            }
	}

	if(retval)
	{
            if(f.txtfat){
		kcalval = f.txtkcal.value;
		fatval = f.txtfat.value;

		if(kcalval<(fatval*9)){
			alert("Every gram of Fat must contain at least 9 Kcal. Based on your fatg figure the energy should be at least " + Math.round((fatval*9)) + "kcal.");
			retval = false;
		}
		}
	}

	if(!retval)
	{
		return;
	}
        
        if(formname=='ma_recipeQuickAddItem'){
            ajax_Submit("recipeQuickAddItem",saveIngredOK,alert_err,'',null);
            jQuery("#modalQuickAdd").modal("hide");
        } 
        
	if(mode==1 && saveonly==0)
		confirmAdd();
        else if(mode==1 && saveonly==1)
        {
                confirmAddDo();
        }
	else
		//we nned to do ajax stuff
	{
	var url = "/DataAction?section=product&action=change&id=" + currentpid;

	var opt = f.srvsize.options[f.srvsize.selectedIndex];


	var s = "&ss=" + escape(opt.text) + "&txtkcal=" + f.txtkcal.value + "&txtfat="+ f.txtfat.value + "&srvsize=" + opt.value + "&txtprotein=" + f.txtprotein.value + "&txtsatfat=" + f.txtsatfat.value + "&txtcarbs=" + f.txtcarbs.value + "&txtfibre=" + f.txtfibre.value + "&txtsugars=" + f.txtsugars.value + "&txtsodium=" + f.txtsodium.value + "&saveonly=" + f.saveonly.value;

	if(f.fiveaday)
	{
		if(f.fiveaday.selectedIndex>-1)
		{
			s = s + "&fiveaday=" + 	 f.fiveaday.value;
		}
	}
	if(f.txtalcohol)
	{
		s = s+"&txtalcohol=" + f.txtalcohol.value;
	}

	//currentpid = productid;
	ajax_Get(url + s, js3);

	}
}

//*************** SEARCH2 ************** 
function searchPageIncrement(f,val){
    if(f.length>0){
        if(jQuery("#searchpage").length>0){
            gotopage = parseInt(jQuery("#searchpage").val()) + parseInt(val);
            jQuery("#searchpage").val(gotopage);
        }
    }    
}
function searchPageGoto(f,val)
{
     if(f.length>0 && jQuery("#searchpage").length>0 && val>=0){
        jQuery("#searchpage").val(val);
    }   

}
function searchPageVisual(f,val)
{   
    if(f.length>0 && jQuery("#searchvisual").length>0 && !(typeof val === 'undefined')){
        jQuery("#searchvisual").val(val);
    }    

}
function SearchExerciseText2(f,param)
{

     var f=document.forms[f];
    if (f.txt_productsearch.value.length < 3)
    {
        basicAlert("Please enter 3 or more characters to perform a search.");
    }
    else { // If validation passes
        if(typeof param === 'undefined')
			param='';
        if(f.txt_page)
        {
                if(param.length>0)
                    param = param  + '&page=' + f.txt_page.value
                else
                    param = 'page=' + f.txt_page.value
        }
        
        //textSearch = "Text Search > " + f.txt_productsearch.value;
        searchExerciseAutoSearch2(f.txt_productsearch.value,param);
    }
    return false;
}
/*
function searchExercisePage2(formid,page)
{
     var f=$(formid);
     if(f && f.page)
        f.page.value = page  - 1;
     SearchExerciseText2(formid);

}
*/
function searchExerciseAutoSearch2(p,param){

	var desc = p;

        var url;
        if(desc.indexOf('e.g. ')==0)
            desc=desc.substring(5);

        searchbox = getSearchBoxJQ();
        url = "/Ajax/Search2/ExerciseTextSearch?section=diary&action=search&subaction=product&desc="+escape(desc) + (param==undefined ? "" :"&"+param);
        stackClear();
        stackAdd(url);
       // jQuery("#txt_productsearch2").blur();
       // url = itemsPerPage(url,exsrchdisplay); 
        ajax_UpdaterURL(url,searchbox.attr("id"),displaySearch)

}

function SearchExerciseMain2(parentid, bc) {

    // Perform Search
    SearchExercise2(parentid, bc);
}

function SearchExercise2(parentid, bc) {

    url = "/Ajax/Search2/ExerciseSubCats?key=" + parentid;
    SearchExerciseUpdate2(url,false);

}

function SearchExerciseUpdate2(url,clearstack)
{
    if(clearstack)
    stackClear();
    stackAdd(url);
    searchbox = getSearchBoxJQ();
    jQuery("#txt_productsearch2").blur();
   // url = itemsPerPage(url,VISDISPLAY);    
    if(url.indexOf("/api/") !== -1){
        api_SearchUpdate(history.state.api,history.state.template);
    } else {
         ajax_UpdaterURL(url,searchbox.attr("id"),displaySearch)
    } 
}
function SearchExerciseFav2(url,f,clearstack,addpage,visual,gotopage,sort)
{
    if(clearstack)
        stackClear();
    stackAdd(url);
    
    searchbox = getSearchOutBox2();
  
    var params='';
   var f1 = document.getElementById(f);

    if(!(typeof gotopage === 'undefined') && gotopage>=0)
       searchPageGoto(f1,gotopage); 
    else
       searchPageIncrement(f1,addpage);
    searchPageVisual(f1,visual);
    
    if(!(typeof sort === 'undefined') && sort>=0)
    {
	if(f1.sort)
         f1.sort.value=sort;
    }
    if(f)
        params = f1.serialize();
    if(url.indexOf("?")>0)
        url = url + "&" + params;
    else
        url = url + "?" + params;
    //VISDISPLAY = visual;
   // url = itemsPerPage(url,VISDISPLAY);
    stackAdd(url);
    ajax_UpdaterURL(url,searchbox.id,displaySearch)
}


function exerciseBL2(key,desc){

    var url = "/Ajax/Search2/ExerciseList?key="+key+"&desc="+desc;
    SearchExerciseUpdate2(url,false);
}
function exerciseActivity2(key,desc,kph,manexid){

    var url = "/Ajax/Search2/ExerciseActivity?key="+key+"&desc="+desc+"&kph="+Math.abs(kph)+"&manexid="+manexid;
   SearchExerciseUpdate2(encodeURI(url),false);
    //SearchExerciseUpdate(encodeURI(url),false);
}

// For a category Search
function SearchCategoryBL2(parentid, bc) {
	// Load the breadcrumb into the arrays
        url = "/Ajax/Search2/FoodList?parentid=" + parentid + getUrlRecipeID();

        SearchUpdate(url,false);

}
function SearchCategory2(parentid, bc) {

    url = "/Ajax/Search2/FoodSubCats?parentid=" + parentid +  getUrlRecipeID();
    SearchUpdate(url,false);

}
function SearchCategoryMain2(parentid, bc) {

    // Perform Search
    SearchCategory2(parentid, bc);
}

function SearchCategoryMainMapper(parentid, bc) {
    // Perform Search
    SearchCategoryMapper(parentid, bc);
}
function SearchCategoryMapper(parentid, bc) {
    url = "/Ajax/Search2/FoodSubCats?mapper=1&parentid=" + parentid +  getUrlRecipeID();
    SearchUpdate(url,false);
}
function SearchCategoryBLMapper(parentid, bc) {
	// Load the breadcrumb into the arrays
        url = "/Ajax/Search2/FoodList?mapper=1&parentid=" + parentid + getUrlRecipeID();
        SearchUpdate(url,false);
}


function hideDiary()
{
    var diary = jQuery('#diaryContentContainer');
	if(diary) diary.hide();
}
function showDiary()
{
    var diary = jQuery('#diaryContentContainer');
	if(diary) diary.show();
    
}

function SearchText2(f,srch) {
	filterPage=0;
        var f=document.forms[f];

	// Validation
        var page="";
        if(f.txt_page)
        {
            page = "&page=" + f.txt_page.value;
        }

        if(jQuery("#RecipeID").length>0){
            if(srch==undefined || srch.indexOf("recipeID")==-1){
                if(srch==undefined){
                    srch="&recipeID="+ jQuery("#RecipeID").val();
                } else {
                     srch=srch + "&recipeID=" + jQuery("#RecipeID").val();
                }        
            }
	}

	if (f.txt_productsearch.value.length < 3)
	{
		basicAlert("Please enter 3 or more characters to perform a search.");
	}
        else if(f.txt_brandid)
        {
            productAutoSearch2(f.txt_productsearch.value,"brandID=" + f.txt_brandid.value + page + (srch==undefined ? "" :srch));
        }
        else if(srch=='compare')
        {
            productAutoSearch2(f.txt_productsearch.value,srch);
        }
	else
        {
            productAutoSearch2(f.txt_productsearch.value,(srch==undefined ? "" :srch));
	}
	return false;
}

function productAutoSearch2(p, srch){
	filterPage=0;
	var desc = p;

        var url;
        if(desc.indexOf('e.g. ')==0)
            desc=desc.substring(4);

        if(srch=='compare'){
            url = "/Ajax/FoodSwapSearch?filter=1&desc="+escape(desc);
        } else{
            url = "/Ajax/Search2/ProductSearch?filter=1&desc="+escape(desc) + (srch==undefined ? "" : "&"+srch);
        }
        SearchUpdate(url,true);
        
	return false;
}

function ebc_go_back2()
{
        var obj = searchstack.pop();
        if(searchstack.size()>0)
        {
             obj = searchstack.pop();
            SearchExerciseUpdate2(obj.url,false);
        }
}

function selectSearchIndex(url,alpha){
    SearchUpdate(url+'?alpha='+alpha,false);
}

function getUrlRecipeID()
{
    if(jQuery("#RecipeID").length>0){
        return  "&recipeID=" + jQuery("#RecipeID").val();
    } else {
       return "";
   }
    
}


function getSearchOutBox2()
{
        //ajax_remove(SEARCHDIV,'pane_search_extend');
        //ajax_remove(SEARCHDIV,'search_energy_out_pane');

        hideDiary();


        searchbox = $("pane_search_extend");
	// If the searchbox doesn't already exist, then create it.
	// If it does exist, then make sure it's shown and remove the contents.
	mastercontainervar = $(SEARCHDIV);
        diaryDiv = $("dContent");
	if(searchbox === null)
	{
		searchbox = document.createElement("div");
		searchbox.id = "pane_search_extend";
		//document.body.appendChild(searchbox);
		if(mastercontainervar==null)
		{
			document.body.appendChild(searchbox);
		}
		else
		{
                    if(mastercontainervar.childNodes.length>0)
			mastercontainervar.insertBefore(searchbox,mastercontainervar.childNodes[0]);
                    else
                        mastercontainervar.insert(searchbox);
		}
             if(!(ie7 || ie6)) searchbox.addClassName('ex');
	}
        if(diaryDiv)
        diaryDiv.style.display='none';
	//searchbox.innerHTML = '';
	//showHideLayers('pane_search_extend','show')
	return searchbox;

}