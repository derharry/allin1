var isMobile = false;
var occasionid;
var filtertitle="Results";
var filterurl; //get api json
var picturedisplay;
var nutspinner = '<div class="spinner"><img src="'+nutmedia+'media/images/parts/spinner.gif" class="img-responsive" alt="Waiting..." /></div>';
var displayproperyname;
var setrecipeid="";
var itemdescription="";
var servingname=""; 
var servingid="";
var serving_productid="";
var addToMeal = jQuery("#addToMeal").val();
var historyurl ="";
var historytemplate ="";
var hideServingOptions="";

function api_SearchUpdate(url,templatename,historyignore){
    
    if(historyignore!='1'){
        historyurl=url;
        historytemplate=templatename;
    }
    searchHistoryObj={
        api:historyurl,
        template:historytemplate   
    };
    history.pushState(searchHistoryObj,'');
           
    displayproperyname = templatename;
    
    var entriesHTML="";
    jQuery("#searchTarget").prepend(nutspinner);
    
   /* jQuery.ajaxSetup({
        headers: {   
            'x-api-version': '9.0.0',
            'Access-Control-Allow-Headers': 'x-api-version'
        }            
   //     headers: { 'X-Api-version': '9' }
    });*/
    
    
    jQuery.getJSON(url,function(json){
        
        template = Handlebars.getTemplate(templatename,"search");
        entriesHTML = template(json);

    }).done(function(){
        
        hideDiary();
        
        if(templatename.indexOf("_subcats")>=0){
           jQuery("#subCatsTarget").html(entriesHTML);
        } else{
           jQuery("#searchTarget").html(entriesHTML); 
        }   
        
        stackAdd(url);   // keep this for bean updates     
        
        if(templatename=='servings'){
            addTrafficLightLabels("servings");
        }
        
        jQuery(".mealsResultsPictureImg").error(function(){
            jQuery(this).unbind("error");
            imgsrc = jQuery(this).attr("src");
            if(imgsrc.indexOf("recipe") >= 0){
                jQuery(this).attr("src",nutmedia+"media/images/userrecipes/default1.png");
            } else if(imgsrc.indexOf("exercise") >= 0){
                jQuery(this).attr("src",exercise_placeholder);
            } else {
                jQuery(this).attr("src",emptytrolly);
            }            
        });         
        
        jQuery(".servingImageHolder").error(function(){
            jQuery(this).unbind("error");
            imgsrc = jQuery(this).attr("src");
            if(imgsrc.indexOf("recipe") >= 0){
                jQuery(this).parent().attr("style","background-image:url('"+nutmedia+"media/images/userrecipes/default1.png')");
            } else if(imgsrc.indexOf("exercise") >= 0){
                jQuery(this).parent().attr("style","background-image:url('"+exercise_placeholder+"')");;
            }  else {
                jQuery(this).parent().attr("style","background-image:url('"+emptytrolly+"')");
            }
        });    

        jQuery("[data-subcatsthumb]").error(function(){
            jQuery(this).unbind("error");
            imgsrc = jQuery(this).attr("data-subcatsthumb");
            jQuery(this).parent().attr("style","background-image:url('"+imgsrc+"')");    
        });    
    
        hideServingOptions="";
        jQuery(".spinner").remove();
        
    }).fail(function(jqXHR, textStatus, errorThrown){
        
       if(jqXHR.status==403){
           window.location.replace("/Support/login");
       } else {
           jQuery(".spinner").remove();
           basicAlert('Whoops, there has been an error.','','basicAlertRoundedBtn bootstrap_migrate'); 
       }   
       
    }).always(function(){
        searchOverflow();
    });  
}

function searchOverflow(){
    nut_winheight=jQuery(window).height();
    nut_content = Math.floor(nut_winheight - 134);
    jQuery("#searchFlyOut3").css("max-height",nut_content);

    if(jQuery("#productSearchContainer").length>0){
    //    setTimeout(function(){
            resultsoffset = jQuery("#productSearchContainer").position().top;
            resultsheight = jQuery("#productSearchContainer").height();
            if(resultsheight > (nut_content - resultsoffset)){
                jQuery("#productSearchContainer").css("height",nut_content - resultsoffset -36);
                jQuery("#productSearchContainer").addClass("overflowy");
            }
      //  }, 100);
    }  
}

function servingGetFraction(quantity)
{
    if(quantity>0){
        num = Math.floor(quantity);
        frac = quantity%1;      
        snum="";
        sfrac="";
        
        if (num >= 1){
            snum=num.toString();
        }    
        if(frac>0){
            if(frac < 0.13){
                sfrac="&frac18;";
            } else if (frac < 0.17){
                sfrac="&frac16;";
            } else if (frac < 0.21){
                sfrac="&frac15;";        
            } else if (frac < 0.26){
                sfrac="&frac14;";
            } else if (frac < 0.35){
                sfrac="&frac13;";
            } else if (frac < 0.41){
                sfrac="&frac25;";
            } else if (frac < 0.51){
                sfrac="&frac12;";
            } else if (frac < 0.61){
                sfrac="&frac35;";
            } else if (frac < 0.67){
                sfrac="&frac23;";
            } else if (frac < 0.76){
                sfrac="&frac34;";
            } else if (frac < 0.81){
                sfrac="&frac45;";
            } else if (frac < 0.84){
                sfrac="&frac56;";
            } else{
                sfrac="";
            }
        }    

        return snum + sfrac;
        
    } else {
        switch(quantity)
        {
            case 0:
                return "&frac12;";
            case -1:
                return "&frac13;";
            case -2:
                return "&frac14;";
            case -3:
                return "&frac18;";    
            default:
                return quantity;
        }
    }  
}

function updateUserProperty(userobj,userpropname,userpropval,refresh){
    url="/Ajax/UpdateUserProperty?userObjectName="+userobj+"&userPropertyName="+userpropname+"&userPropertyValue="+userpropval;

    jQuery.ajax({
        type:'post',
        url:url,	
        dataType:"html" 	                 
   }).done(function(){
        if(!(refresh=="undefined" || refresh == null || refresh=="")){
            window.location.replace(refresh);
        }
   }).fail(function(jqXHR, textStatus, errorThrown){
        if(jqXHR.status==403){
            window.location.replace("/Support/login");
        } else {
          //  alert("There has been an error.");
        }   
   });  
}
function getMealOccasionName(id){
    var mealoccasion="Recipe Book";

    if(id=='0'){
        mealoccasion="Popular Recipes";
    }        
    if(id=='1'){
        mealoccasion="Breakfast";
    } 
    if(id=='23'){
        mealoccasion="Lunch";
    }     
    if(id=='3'){
        mealoccasion="Starters";
    }       
    if(id=='4'){
        mealoccasion="Dinner";
    }      
    if(id=='22'){
        mealoccasion="Desserts";
    }  
    if(id=='5'){
        mealoccasion="Drinks";
    }     
    if(id=='2'){
        mealoccasion="Snacks";
    }
    if(id=='101'){
        mealoccasion="Shared Meals";
    }
    if(id=='100'){
        mealoccasion="Popular Recipes";
    } 
 
    return mealoccasion;  
}
function orderMealsBy(id,name,term){
    template=name;
    searchparams="&page=1";
    if(name=="textsearch"){
        if(term!="" && typeof term !="undefined"){
            searchparams+='&term='+term;
        }
        textsearch="&term="+searchterm;
    }
    orderby = jQuery("#nut_searchFilter").val();
    api_SearchUpdate("/api/v1.3/my-meals/occasions?occasion="+id+"&sortBy="+orderby+searchparams,"mymeals_results"); 
}

function nutvalDisplayDP(col,val,dq){
    dp = 1;
    defaultq=1.0;
    if(dq>0){
        defaultq=parseFloat(dq);
    }    
    
    if(col=='sodium' || col=='kcal'){
        dp=0;
    }    
    if(col=='salt'){
        dp=2;
    }    
    if(val=="-"){
        return "-";
    } else{
        nutval = parseFloat(val*defaultq).toFixed(dp).toString();
        if(nutval=="NaN"){
            return "-";
        } else {
            return nutval;
        }
    }
}

function postServings(endpoint,params,refresh){
    
    var tzoffset = (new Date()).getTimezoneOffset() * 60000; 
    var localISOTime = (new Date(Date.now() - tzoffset)).toISOString();     

    jQuery.ajax({
        type:'post',
        url:endpoint,  
        dataType: 'json',
        contentType: 'application/json',  	
        data:params,
        headers: {   
            'X-Local-timestamp': localISOTime,
            'Access-Control-Allow-Headers': 'X-Local-timestamp'
        }       
    }).done(function(){
      jQuery("#pane_search_extend").prepend(nutspinner);  
      window.location.replace(refresh);
    }).fail(function(jqXHR, textStatus, errorThrown){
       if(jqXHR.status==403){
           window.location.replace("/Support/Login");
       } else {
           alert("There has been an error.");
       }  
    });        
} 
 
function clearAddWeightDisplay(index){
    quantity=jQuery("#tempQuan"+index).val();
    jQuery("#api_quantity").val(quantity);      
    jQuery("input[data-addweightsize]").val("");
    jQuery("#api_measure").val("g");
    jQuery("#displaySelectMeasure").val("g");
    jQuery('[data-getaddweightval]').each(function(){
        jQuery('[data-showaddweightval]').text("");
    });
    jQuery('[data-showdurationval]').text("");
 }
 
 function switchAddWeightDisplay(index){
    if(index=="custom"){
       jQuery("#displayWeightTxt").hide();
       jQuery("#displayWeightInput").show();
       jQuery("input[data-addweightsize]").focus();
       jQuery("input[data-inputduration]").focus();
       jQuery("#displaySelectMeasure").show();
    } else {
       jQuery("#displayWeightTxt").show();
       jQuery("input[data-addweightsize]").blur();
       jQuery("input[data-inputduration]").blur();
       jQuery("#displayWeightInput").hide();
       jQuery("#displaySelectMeasure").hide();
    }   
 }
 
function updateAddWeightDisplay(){
    size = jQuery("input[data-addweightsize]").attr("data-addweightsize");
    measure=jQuery("#api_measure").val();
    amount = jQuery("input[data-addweightsize]").val();
    fsize = parseFloat(amount/size);
    api_factor=jQuery("#api_factor").val();
    fcp_sum = 0;
    if(measure=="oz"){
        fsize = fsize * 28.3495;
    } else if(measure=="fl oz"){
        fsize = fsize * 29.5735;
    } else if(measure=="us fl oz"){
        fsize = fsize * 29.5735;
    }

    jQuery('[data-getaddweightval]').each(function(){
        //update the serving table columns 
        nutrient=jQuery(this).attr("data-getaddweightval");
        nutval=jQuery(this).val();
        formattednutval="-";
        if(amount==""){
            formattednutval="";
        } else if(nutval=="-"){
            formattednutval="-";
        } else {
            nutvalsize=parseFloat((fsize*nutval).toFixed(4));
            nutvalpf = parseFloat((nutvalsize)/api_factor);
            formattednutval = nutvalDisplayDP(nutrient,nutvalpf);
        }
        if(nutrient=='fatg' || nutrient=='carbs' || nutrient=='prot'){
            fcp_sum = fcp_sum + nutvalpf;
        }             
        getnutdisplayspan='[data-showaddweightval="'+nutrient+'"]';
        jQuery(getnutdisplayspan).text(formattednutval);
        if(jQuery('[data-showaddweightval="kcal"]').text()==""){
            jQuery(".addWeightRow .colNutri").addClass("customServingTL");
        } else{
            jQuery(".addWeightRow .colNutri").removeClass("customServingTL");
        }
        jQuery('.addWeightRow [data-trafficlightservings="'+nutrient+'"]').attr("data-size",amount);
        jQuery('.addWeightRow [data-trafficlightservings="'+nutrient+'"]').attr("data-value",formattednutval);
        if(measure=='g' || measure =='ml'){
            jQuery('.addWeightRow [data-trafficlightservings="'+nutrient+'"]').attr("data-measure",measure); 
        }
        jQuery('.addWeightRow [data-trafficlightservings="'+nutrient+'"]').attr("class","");    
    }).promise().done(function(){
        jQuery('.addWeightRow [data-trafficlightservings]').each(function(){
            jQuery(this).attr("data-fcp-sum",fcp_sum);
        });
	addTrafficLightLabels("servings");
    });   
} 

function api_displayServings(name,id,description,type){
    servingname=name; 
    servingid=id; //set the getServingID helper 
    itemdescription=description;  
    template="servings";
    endpoint="/api/servings?"+name+"="+id;

    if(type=="exercise"){
        if(name=='manuallyAddedID'){
            endpoint="/api/exercises?manuallyAddedID="+id;
        } else if(name=='favouriteID'){
            endpoint="/api/exercises?favouriteID="+id;
        } else {
            endpoint="/api/exercises/"+id;
        }
        template="durations";
    }
    api_SearchUpdate(endpoint,template,"1");
} 

function amendMyVersionSuccess(){
    pid= jQuery("#amendProductID").val();
    refreshdiary=jQuery("#refreshDiary").val();
    amendname=jQuery("[data-amendinfo]").attr("data-amendinfo");
    refreshmulticopy=jQuery("#refreshMultiCopy").val();
    
    
    if(refreshdiary=='1'){
        window.location.replace("/Diary/View");
    } else if(refreshdiary=='2'){
        recipeid=jQuery("#recipeID").val();
        window.location.replace("/Recipes/MyRecipes/EditRecipe?recipeID="+recipeid);
    } else if(refreshmulticopy=='1'){
          window.location.replace("/Diary/ManualAdd");
    } else {
        api_displayServings(amendname,pid,itemdescription);
    }
}

function sb_closeSearch(){
    jQuery("#searchTarget").html("");
    jQuery("#diaryContentContainer").show();    
}

///*** handlebar helpers ***\\\


partial_visualfilter = Handlebars.getTemplate('search_visualfilter','partial');
Handlebars.registerPartial({
    "visualfilter": partial_visualfilter
});

partial_product_results = Handlebars.getTemplate('product_results','search/partial');
Handlebars.registerPartial({
    "productresults": partial_product_results
});

partial_exercise_results = Handlebars.getTemplate('exercise_results','search/partial');
Handlebars.registerPartial({
    "exerciseresults": partial_exercise_results
});

Handlebars.registerHelper('getDefaultQuantity', function(dq){
    dquantity="1";
    if(dq>0){
        dquantity= servingGetFraction(dq);
    }
        
    return new Handlebars.SafeString(dquantity);
});  

Handlebars.registerHelper('getDefaultNutVal', function(nut,f){
    if(nut >0.0){
        return nut/f;
    } else {
        return "0.0";
    }
});  

Handlebars.registerHelper('getHideServingOptions', function(){
        return hideServingOptions;
});  

Handlebars.registerHelper('visualSelectedCSS', function(vis) {
    if(picturedisplay==vis){
        return "selected";
    }
});  

Handlebars.registerHelper('visualDisplayCSS', function() {
    if(picturedisplay=="0"){
        return "productSearchText";
    } else if(picturedisplay=="1"){
        return "productSearchThumbs";
    } else {
        return "productSearchPictures";
    }
});  

Handlebars.registerHelper('getSaltLabel', function () {
    return salthdr;
});   

Handlebars.registerHelper('getKcalLabel', function () {
    return kcallabel;
});   

Handlebars.registerHelper('getFibreLabel', function () {
    return fibrelabel;
});

Handlebars.registerHelper('getDisplayBarcode', function () {
    return displayBarcode;
});

Handlebars.registerHelper('getExampleBrand', function () {
    return examplebrand;
});
Handlebars.registerHelper('getExampleDescription', function () {
    return exampledescripiton;
});
Handlebars.registerHelper('getExamplePackSize', function () {
    return examplepacksize;
});
Handlebars.registerHelper('getExampleServing', function () {
    return exampleserving;
});

Handlebars.registerHelper('getDiaryNutCols', function () {
    var nutcolsStr = DiaryView_NutritionCols;
    var nutcolsArray = nutcolsStr.split(',');
   return nutcolsArray;
}); 

Handlebars.registerHelper('getDiaryNutHeader', function (name) {
    var diaryhead = "KCAL";
    if(name=="sugar"){
        diaryhead="SUGg";
    } else if(name=="fibre") {
        diaryhead="FIBg";
    } else if(name=="fatg") {
        diaryhead="FATg";
    } else if(name=="satfat") {
        diaryhead="S/FATg";
    } else if(name=="prot") {
        diaryhead="PROTg";
    } else if(name=="carbs") {
        diaryhead="CARBg";
    } else if(name=="salt") {
        diaryhead="SALTg";
    } else if(name=="sodium") {
        diaryhead="SODmg";
    } else if (name=="kcal"){
        if(kcalshdr=="cals"){
           diaryhead = "Cals"; 
        }
    }
    return diaryhead;
}); 

Handlebars.registerHelper('getItemServings', function (col,kcal,sugars,fibre,fat,saturatedFat,protein,carbohydrates,salt,sodium,dq) {
    nutval="-";
    if(col=="kcal"){
        nutval=kcal;
    }  else if (col=="fatg"){
        nutval=fat;
    } else if (col=="satfat"){
        nutval=saturatedFat;
    } else if (col=="carbs"){
        nutval=carbohydrates;
    } else if (col=="sugar"){
        nutval=sugars;
    } else if (col=="fibre"){
        nutval=fibre;
    } else if (col=="prot"){
        nutval=protein;
    } else if (col=="salt"){
        nutval=salt;
    } else if (col=="sodium"){
        nutval=sodium;
    } 
    
    return nutvalDisplayDP(col,nutval,dq);

});

Handlebars.registerHelper('getFDPFormat', function(nut, nutval){
    return nutvalDisplayDP(nut,nutval);
});

Handlebars.registerHelper('getFCPSum', function (fat, carbs, protein) {
    total = 0;
    
    fat = parseFloat(fat);
    if (!isNaN(fat)) {
        total = total + fat;
    }
    
    carbs = parseFloat(carbs);
    if (!isNaN(carbs)) {
        total = total + carbs;
    }
    
    protein = parseFloat(protein);
    if (!isNaN(protein)) {
        total = total + protein;
    }
    
    return total;
});

Handlebars.registerHelper('getItemDescription', function() {
    return Handlebars.Utils.escapeExpression(itemdescription);
});

Handlebars.registerHelper('getServingID', function() {
        return servingid;
});

Handlebars.registerHelper('getServingName', function() {
    return Handlebars.Utils.escapeExpression(servingname);
});

Handlebars.registerHelper('filterTitle', function() {
        return filtertitle;
});

Handlebars.registerHelper('recipeID', function() {
        return setrecipeid;
});

Handlebars.registerHelper('isAddToMeal', function(options) {
    return (addToMeal > 0) ? options.fn(this) : options.inverse(this);
});


Handlebars.registerHelper('filterURL', function() {
        return filterurl;
});

Handlebars.registerHelper('numResults', function (obj) {
    return obj.length;
});   

Handlebars.registerHelper('occasionID', function() {
        return occasionid;
}); 

Handlebars.registerHelper('getMealOccasionName', function(id){
    return getMealOccasionName(id);
});

Handlebars.registerHelper('getOrderBy', function(val){
    if (val == orderby) {
        return 'selected="selected"';
    }
});

Handlebars.registerHelper('returnOrderBy', function(){
        return orderby;
});
