nutmedia = "//d2lhwe7okuon6r.cloudfront.net/";

Handlebars.getTemplate = function(name,directory) {
    if (Handlebars.templates === undefined || Handlebars.templates[name] === undefined) {
        jQuery.ajax({
            url : '/js/templates/'+directory+'/' + name + '.handlebars?v=40',
            success : function(data) {
                if (Handlebars.templates === undefined) {
                    Handlebars.templates = {};
                }
                Handlebars.templates[name] = Handlebars.compile(data);
            },
            async : false
        });
    }
    return Handlebars.templates[name];
};

Handlebars.registerHelper("greaterThan", function(value1 ,value2, options) {
    if (value1 > value2) {
        return options.fn(this);
    } else {
        return options.inverse(this);
    }
});

Handlebars.registerHelper('NUTMEDIA', function() {
        return nutmedia;
});

Handlebars.registerHelper('ifEquals', function(arg1, arg2, options) {
    return (arg1 == arg2) ? options.fn(this) : options.inverse(this);
});

Handlebars.registerHelper('ifNotEquals', function(arg1, arg2, options) {
    return (arg1 == arg2) ? options.inverse(this) : options.fn(this);
});

Handlebars.registerHelper('getLength', function (obj) {
    return obj.length;
});  

Handlebars.registerHelper('getKcalsLabel', function () {
    return kcalslabel;
});  

Handlebars.registerHelper('getKcalLabel', function () {
    return kcallabel;
}); 

Handlebars.registerHelper('getSafeString', function (str) {
    return Handlebars.Utils.escapeExpression(str);
});  

Handlebars.registerHelper('getSessionJson', function(name) {
    return JSON.parse(sessionStorage.getItem(name));
});  

Handlebars.registerHelper("getIndexOffSet", function(i){
    return parseInt(i) + 1;
});

Handlebars.registerHelper('eachByDescription', function(context,options){
    var output = '';
    var contextSorted = context.concat().sort(function(a,b){ 
        return a.description.toLowerCase().localeCompare(b.description.toLowerCase()); 
    });
    for(var i=0, j=contextSorted.length; i<j; i++) {
        output += options.fn(contextSorted[i]);
    }
    return output;
});  

jQuery.fn.serialiseObject = function()
{
   var o = {};
   var a = this.serializeArray();
   jQuery.each(a, function() {
       if (o[this.name]) {
           if (!o[this.name].push) {
               o[this.name] = [o[this.name]];
           }
           o[this.name].push(this.value || '');
       } else {
           o[this.name] = this.value || '';
       }
   });
   return o;
};

function loadBasicHbars(endpoint,targetid,directory,hbarstemplate,onsuccess){
    jQuery.getJSON(endpoint,function(json){
        template = Handlebars.getTemplate(hbarstemplate,directory);
        entriesHTML = template(json);
    }).done(function(json){
        jQuery("#"+targetid).html(entriesHTML);
        if(!(onsuccess==undefined || onsuccess=='' || onsuccess==null)){
          onsuccess(json);
        }            
    }).fail(function(jqXHR, textStatus, errorThrown){
        ajax_fail(jqXHR); 
    });
}

function setSessionJson(name,json){
    sessionjson = "["+JSON.stringify(json)+"]";
    if (typeof(Storage) !== "undefined"){
        sessionStorage.setItem(name,sessionjson);
    }
} 

function getSessionJson(name) {
  var sessionjson = {};
  if (typeof Storage !== "undefined") {
    sessionjson = JSON.parse(sessionStorage.getItem(name));
  }
  return sessionjson;
}
